/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mvc;

import Classes.User;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import tableModels.AccountTableModel;
import tableModels.BookingTableModel;
import tableModels.CansTableModel;
import tableModels.Cans_UseTableModel;
import tableModels.MembersTableModel;

/**
 *
 * @author USAURIO
 */
public class Controller implements ActionListener {

    /**
     * The attributes of Controller
     */
    private Model model;
    private View view;

    /**
     * The constructor of Controller
     *
     * In the constructor the attributes are going to receive a value.
     *
     * Then the values of the tables are going to be generated by calling to
     * some functions.
     *
     * After that it is going to be called to addActionListener()
     *
     * @param model
     * @param view
     */
    public Controller(Model model, View view) {
        this.model = model;
        this.view = view;

        taulakEguneratu();

        addActionListener(this);
    }

    /**
     * It is going to give an actionListener to each button
     *
     * @param listener
     */
    private void addActionListener(ActionListener listener) {
        view.jButtonSubmitLogin.addActionListener(listener);
        view.jButtonAddMember.addActionListener(listener);
        view.jButtonUpdateMember.addActionListener(listener);
        view.jButtonDeleteMember.addActionListener(listener);
        view.jButtonDeleteBooking.addActionListener(listener);
    }

    /**
     * It is going to say each button what is going to do
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String actionCommand = e.getActionCommand();

        switch (actionCommand) {
            /* When you want to log in */
            // When you click submit button
            case "SUBMIT":
                login();
                break;
            /* When you want to add a member */
            // When you click ADD_MEMBER button
            case "ADD_MEMBER":
                enterUser();
                break;
            case "UPDATE_MEMBER":
                if (updateUser()) {
                    taulakEguneratu();
                } else {
                    view.jLabelErrorMember.setText("The member couldn't be updated correctly");
                }
                break;
            case "DELETE_MEMBER":
                deleteUser();
                break;
            case "DELETE_BOOKING":
                deleteBooking();
                break;
        }
    }

    public void taulakEguneratu() {
        this.view.jTableAccount.setModel(new AccountTableModel());
        this.view.jTableBooking.setModel(new BookingTableModel());
        this.view.jTableMember.setModel(new MembersTableModel());
        this.view.jTableBin.setModel(new CansTableModel());
        this.view.jTableBin_Use.setModel(new Cans_UseTableModel());
    }

    public void login() {
        String u = view.jTextFieldEmailLogin.getText();
        String p = new String(view.jPasswordFieldPasswordLogin.getPassword());

        ArrayList<User> us = model.showUsers();

        for (int i = 0; i < us.size(); i++) {
            if (u.equalsIgnoreCase(us.get(i).getEmail()) && p.equals(us.get(i).getPassword()) && us.get(i).isType()) {
                view.jDialogMenu.setVisible(true);
                view.jLabelErrorMessage.setText("");
                break;
            } else {
                System.out.println("Venga chaval, buen intento!");
                view.jLabelErrorMessage.setText("Sorry, you cannot enter to the appliacation, because you are not the administrator.");
            }
        }

        view.jTextFieldEmailLogin.setText("");
        view.jPasswordFieldPasswordLogin.setText("");
    }

    public void enterUser() {
        User u = new User(view.jTextFieldDni.getText().trim(), view.jTextFieldName.getText().trim(),
                view.jTextFieldSurname.getText().trim(), view.jTextFieldEmailMember.getText().trim(),
                new String(view.jPasswordFieldPassword.getPassword()), view.jTextFieldAccount.getText().trim(),
                view.jRadioButtonAdministrator.isSelected());
        if (model.addUser(u) == 1) {
            taulakEguneratu();
            view.jLabelErrorMember.setText("");
        } else {
            view.jLabelErrorMember.setText("The member couldn't be added correctly");
        }
    }

    public boolean updateUser() {
        return false;
    }

    public void deleteUser() {
        int lerroa = view.jTableMember.getSelectedRow();
        String gakoa = (String) view.jTableMember.getValueAt(lerroa, 3);
        if (model.deleteMember(gakoa) == 1) {
            view.jLabelErrorMember.setText("");
            taulakEguneratu();
        } else {
            view.jLabelErrorMember.setText("The member couldn't be deleted correctly");
        }
    }
    
    public boolean deleteBooking() {
        int lerroa = view.jTableBooking.getSelectedRow();
        int gakoa = (Integer) view.jTableBooking.getValueAt(lerroa, 0);
        
        if (model.deleteBooking(gakoa) == 1) {
            view.jLabelErrorBooking.setText("");
            taulakEguneratu();
        } else {
            view.jLabelErrorBooking.setText("The booking couldn't be deleted correctly");
        }
        return false;
    }
}
