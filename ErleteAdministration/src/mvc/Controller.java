/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mvc;

import Classes.User;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import tableModels.AccountTableModel;
import tableModels.BookingTableModel;
import tableModels.Cans_MergeTableModel;
import tableModels.MembersTableModel;

/**
 *
 * @author USAURIO
 */
public class Controller implements ActionListener {

    /**
     * The attributes of Controller
     */
    private Model model;
    private View view;

    /**
     * The constructor of Controller
     *
     * In the constructor the attributes are going to receive a value.
     *
     * Then the values of the tables are going to be generated by calling to
     * some functions.
     *
     * After that it is going to be called to addActionListener()
     *
     * @param model
     * @param view
     */
    public Controller(Model model, View view) {
        this.model = model;
        this.view = view;

        taulakEguneratu();

        addActionListener(this);
    }

    /**
     * It is going to give an actionListener to each button
     *
     * @param listener
     */
    private void addActionListener(ActionListener listener) {
        view.jButtonSubmitLogin.addActionListener(listener);
        view.jButtonAddMember.addActionListener(listener);
        view.jButtonUpdateMember.addActionListener(listener);
        view.jButtonDeleteMember.addActionListener(listener);
        view.jButtonDeleteBooking.addActionListener(listener);
    }

    /**
     * It is going to say each button what is going to do
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        int lerroa = view.jTableMember.getSelectedRow();

        if (lerroa != -1) {
            view.jTextFieldDni.setText((String) view.jTableMember.getValueAt(lerroa, 0));
            view.jTextFieldName.setText((String) view.jTableMember.getValueAt(lerroa, 1));
            view.jTextFieldSurname.setText((String) view.jTableMember.getValueAt(lerroa, 2));
            view.jTextFieldEmailMember.setText((String) view.jTableMember.getValueAt(lerroa, 3));
            view.jPasswordFieldPassword.setText((String) view.jTableMember.getValueAt(lerroa, 4));
            view.jTextFieldAccount.setText((String) view.jTableMember.getValueAt(lerroa, 5));
        }

        String actionCommand = e.getActionCommand();

        switch (actionCommand) {
            /* When you want to log in */
            // When you click submit button
            case "SUBMIT":
                login();
                break;
            /* When you want to add a member */
            // When you click ADD_MEMBER button
            case "ADD_MEMBER":
                enterUser();
                break;
            /* When you want to update a member */
            // When you click UPDATE_MEMBER button
            case "UPDATE_MEMBER":
                updateUser();
                break;
            /* When you want to delete a member */
            // When you click DELETE_MEMBER button
            case "DELETE_MEMBER":
                deleteUser();
                break;
            /* When you want to delete a member */
            // When you click DELETE_BOOKING button
            case "DELETE_BOOKING":
                deleteBooking();
                break;
        }
    }

    /**
     * To update all the tables' information
     */
    public void taulakEguneratu() {
        this.view.jTableAccount.setModel(new AccountTableModel());
        this.view.jTableBooking.setModel(new BookingTableModel());
        this.view.jTableMember.setModel(new MembersTableModel());
        this.view.jTableMerge.setModel(new Cans_MergeTableModel());
    }

    /**
     * Is to be used by the administrator in order to log in and prove that
     * he/she is the administrator
     */
    public void login() {
        //Gets the information to log in
        String u = view.jTextFieldEmailLogin.getText();
        String p = new String(view.jPasswordFieldPasswordLogin.getPassword());

        ArrayList<User> us = model.showUsers();

        //Proves if the email and password exists and if this person is administrator
        for (int i = 0; i < us.size(); i++) {
            if (u.equalsIgnoreCase(us.get(i).getEmail()) && p.equals(us.get(i).getPassword()) && us.get(i).isType()) {
                view.jDialogMenu.setVisible(true);
                view.jLabelErrorMessage.setText("");
                break;
            } else {
                System.out.println("Venga chaval, buen intento!");
                view.jLabelErrorMessage.setText("Sorry, you cannot enter to the appliacation, because you are not the administrator.");
            }
        }
        //Cleans the information of the labels
        view.jTextFieldEmailLogin.setText("");
        view.jPasswordFieldPasswordLogin.setText("");
    }

    /**
     * Gets all the information entered of the user and calls to a method in
     * order to enter it in the database
     */
    public void enterUser() {
        //Create an object with the information
        User u = new User(view.jTextFieldDni.getText().trim(), view.jTextFieldName.getText().trim(),
                view.jTextFieldSurname.getText().trim(), view.jTextFieldEmailMember.getText().trim(),
                new String(view.jPasswordFieldPassword.getPassword()), view.jTextFieldAccount.getText().trim(),
                view.jRadioButtonAdministrator.isSelected());
        //prove that all the gaps are filled
        if (view.jTextFieldDni.getText().trim().equals("") || view.jTextFieldName.getText().trim().equals("")
                || view.jTextFieldSurname.getText().trim().equals("") || view.jTextFieldEmailMember.getText().trim().equals("")
                || new String(view.jPasswordFieldPassword.getPassword()).equals("")
                || view.jTextFieldAccount.getText().trim().equals("")) {
            view.jLabelErrorMember.setText("You have to fill all the information.");
            //Prove that the user has been added
        } else if (model.addUser(u) == 1) {
            taulakEguneratu();
            view.jLabelErrorMember.setText("");
            //If not added correctly
        } else {
            view.jLabelErrorMember.setText("The member couldn't be added correctly");
        }
    }

    /**
     * To update users' information
     *
     * You can change everything instead of email
     */
    public void updateUser() {
        int lerroa = view.jTableMember.getSelectedRow();
        if (lerroa == -1) {
            view.jLabelErrorMember.setText("You have to choose a row");
        } else {
            String gakoa = (String) view.jTableMember.getValueAt(lerroa, 3);
            if (!(view.jTextFieldDni.getText().trim().equals(""))) {
                updateUserDni(lerroa, gakoa);
            }
            if (!(view.jTextFieldName.getText().trim().equals(""))) {
                updateUserName(lerroa, gakoa);
            }
            if (!(view.jTextFieldSurname.getText().trim().equals(""))) {
                updateUserSurname(lerroa, gakoa);
            }
            if (!(view.jPasswordFieldPassword.getPassword().equals(""))) {
                String password = new String(view.jPasswordFieldPassword.getPassword());
            }
            if (!(view.jTextFieldAccount.getText().trim().equals(""))) {
                String account = view.jTextFieldAccount.getText().trim();
            }
        }

    }

    public void updateUserDni(int lerroa, String gakoa) {

        String dni = view.jTextFieldDni.getText().trim();

        if (model.updateMemberDni(gakoa, dni) == 1) {
            view.jLabelErrorMember.setText("");
            taulakEguneratu();
        } else {
            view.jLabelErrorMember.setText("The member couldn't be updated correctly");
        }
    }

    public void updateUserName(int lerroa, String gakoa) {
        String name = view.jTextFieldName.getText().trim();

        if (model.updateMemberName(gakoa, name) == 1) {
            view.jLabelErrorMember.setText("");
            taulakEguneratu();
        } else {
            view.jLabelErrorMember.setText("The member couldn't be updated correctly");
        }
    }

    public void updateUserSurname(int lerroa, String gakoa) {
        String surname = view.jTextFieldSurname.getText().trim();

        if (model.updateMemberSurname(gakoa, surname) == 1) {
            view.jLabelErrorMember.setText("");
            taulakEguneratu();
        } else {
            view.jLabelErrorMember.setText("The member couldn't be updated correctly");
        }
    }
    /**
     * 
     */
    public void deleteUser() {
        int lerroa = view.jTableMember.getSelectedRow();
        String gakoa = "";

        if (view.jTableMember.getSelectedRow() == -1) {
            view.jLabelErrorMember.setText("You have to choose a row");
        } else {
            gakoa = (String) view.jTableMember.getValueAt(lerroa, 3);
            if (model.deleteMember(gakoa) == 1) {
                view.jLabelErrorMember.setText("");
                taulakEguneratu();
            } else {
                view.jLabelErrorMember.setText("The member couldn't be deleted correctly");
            }
        }
    }

    public void deleteBooking() {
        int lerroa = view.jTableBooking.getSelectedRow();
        int gakoa = 0;

        if (view.jTableMember.getSelectedRow() == -1) {
            view.jLabelErrorMember.setText("You have to choose a row");
        } else {
            gakoa = (Integer) view.jTableBooking.getValueAt(lerroa, 0);
            if (model.deleteBooking(gakoa) == 1) {
                view.jLabelErrorBooking.setText("");
                taulakEguneratu();
            } else {
                view.jLabelErrorBooking.setText("The booking couldn't be deleted correctly");
            }
        }
    }
}
